CMAKE_MINIMUM_REQUIRED ( VERSION 3.0 )

PROJECT ( dispersio3 )

SET ( PROJECT_CFLAGS "-std=c++17" )
SET ( PROJECT_LFLAGS "-L./lib -Wl,-rpath,./lib/" )
SET ( PROJECT_LIBS   sfml-audio sfml-graphics sfml-window sfml-system m jansson stdc++fs )

SET ( PLATFORM_RESOURCE "" )
SET ( PLATFORM_CFLAGS   "" )
SET ( PLATFORM_LFLAGS   "" )
SET ( PLATFORM_LIBS     "" )

SET ( PROJECT_INCLUDE "include" )
SET ( PROJECT_HEADER  "${PROJECT_INCLUDE}/meta/headers.hpp" )

INCLUDE_DIRECTORIES ( ${PROJECT_INCLUDE} )
FILE ( GLOB_RECURSE SRC "src/*.cpp" )


IF ( WIN32 )

        SET ( PLATFORM_RESOURCE "misc/icon/icon.o" )
        SET ( PLATFORM_CFLAGS   "-s" )
        SET ( PLATFORM_LFLAGS   "-mwindows -static-libgcc -static-libstdc++" )

        ADD_CUSTOM_COMMAND ( OUTPUT ${PLATFORM_RESOURCE} COMMAND ${CMAKE_RC_COMPILER} -Imisc/icon -imisc/icon/icon.rc -o ${PLATFORM_RESOURCE} )

ELSEIF ( APPLE )

        SET ( PLATFORM_CFLAGS "-stdlib=libc++ -mmacosx-version-min=10.7" )
        SET ( PLATFORM_LIBS   c++ )

ELSEIF ( UNIX )

        SET ( PLATFORM_CFLAGS   "-s" )
        SET ( PLATFORM_LFLAGS   "-static-libgcc -static-libstdc++" )

ENDIF ( )


SET ( CMAKE_CXX_FLAGS         "${PROJECT_CFLAGS} ${PLATFORM_CFLAGS}" )
SET ( CMAKE_EXE_LINKER_FLAGS  "${PROJECT_LFLAGS} ${PLATFORM_LFLAGS}" )
SET ( CMAKE_LINK_LIBS          ${PROJECT_LIBS}   ${PLATFORM_LIBS} )

ADD_EXECUTABLE ( ${CMAKE_PROJECT_NAME} ${SRC} ${PLATFORM_RESOURCE} )


IF ( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16.0" )

        TARGET_PRECOMPILE_HEADERS ( ${CMAKE_PROJECT_NAME} PUBLIC ${PROJECT_HEADER} )

ENDIF ( )


TARGET_LINK_LIBRARIES ( ${CMAKE_PROJECT_NAME}  ${CMAKE_LINK_LIBS} )

INSTALL ( TARGETS ${CMAKE_PROJECT_NAME} RUNTIME DESTINATION . )
